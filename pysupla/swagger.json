{
  "swagger": "2.0",
  "info": {
    "version": "2.3.0",
    "title": "SUPLA Cloud API"
  },
  "host": "cloud.supla.org",
  "basePath": "/api/v2.3.0",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/accessids": {
      "get": {
        "tags": [
          "Access Identifiers"
        ],
        "summary": "Get Access Identifiers list",
        "operationId": "getAccessIdentifiers",
        "parameters": [
          {
            "$ref": "#/parameters/AccessIdIncludes"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Access Identifiers owned by the current user.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessIdentifier"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Access Identifier",
        "tags": [
          "Access Identifiers"
        ],
        "operationId": "createAccessIdentifier",
        "responses": {
          "201": {
            "description": "Newely created AccessIdentifier with automatic name",
            "schema": {
              "$ref": "#/definitions/AccessIdentifier"
            }
          }
        }
      }
    },
    "/accessids/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get Access Identifier",
        "tags": [
          "Access Identifiers"
        ],
        "operationId": "getAccessIdentifier",
        "parameters": [
          {
            "$ref": "#/parameters/AccessIdIncludes"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Access Identifier",
            "schema": {
              "$ref": "#/definitions/AccessIdentifier"
            }
          }
        }
      },
      "put": {
        "summary": "Update Access Identifier",
        "tags": [
          "Access Identifiers"
        ],
        "operationId": "updateAccessIdentifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Access Identifier update request",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "caption": {
                  "type": "string"
                },
                "password": {
                  "type": "string",
                  "description": "Provide new password if you want to change it."
                },
                "locationsIds": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Locations identifiers to assign to this Access Identifier."
                },
                "clientAppsIds": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Client Apps identifiers to assign to this Access Identifier. If client app is connected to any other Client ID, it will be disconnected from the old one before assigning."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Definition generated from Swagger Inspector",
            "schema": {
              "$ref": "#/definitions/AccessIdentifier"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Access Identifier",
        "tags": [
          "Access Identifiers"
        ],
        "operationId": "deleteAccessIdentifier",
        "responses": {
          "204": {
            "description": "Access Identifier has been successfully deleted"
          }
        }
      }
    },
    "/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get channels list",
        "operationId": "getChannels",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "iodevice",
                "location"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "function",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "CONTROLLINGTHEGATEWAYLOCK",
                "CONTROLLINGTHEGATE",
                "CONTROLLINGTHEGARAGEDOOR",
                "THERMOMETER",
                "HUMIDITY",
                "HUMIDITYANDTEMPERATURE",
                "OPENINGSENSOR_GATEWAY",
                "OPENINGSENSOR_GATE",
                "OPENINGSENSOR_GARAGEDOOR",
                "NOLIQUIDSENSOR",
                "CONTROLLINGTHEDOORLOCK",
                "OPENINGSENSOR_DOOR",
                "CONTROLLINGTHEROLLERSHUTTER",
                "OPENINGSENSOR_ROLLERSHUTTER",
                "POWERSWITCH",
                "LIGHTSWITCH",
                "DIMMER",
                "RGBLIGHTING",
                "DIMMERANDRGBLIGHTING",
                "DEPTHSENSOR",
                "DISTANCESENSOR",
                "OPENINGSENSOR_WINDOW",
                "MAILSENSOR",
                "WINDSENSOR",
                "PRESSURESENSOR",
                "RAINSENSOR",
                "WEIGHTSENSOR",
                "WEATHER_STATION",
                "STAIRCASETIMER"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "io",
            "in": "query",
            "type": "string",
            "description": "Return only `input` or `output` channels.",
            "enum": [
              "input",
              "output"
            ]
          },
          {
            "name": "hasFunction",
            "in": "query",
            "type": "boolean",
            "description": "Return only channels with (`true`) or without (`false`) chosen functions."
          }
        ],
        "responses": {
          "200": {
            "description": "List of channels owned by the current user.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          }
        }
      }
    },
    "/channels/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get channel by ID",
        "tags": [
          "Channels"
        ],
        "operationId": "getChannel",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "iodevice",
                "location",
                "connected",
                "state",
                "supportedFunctions"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Get channel",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        }
      },
      "put": {
        "summary": "Update channel",
        "operationId": "updateChannel",
        "tags": [
          "Channels"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Channel update request",
              "properties": {
                "functionId": {
                  "type": "integer"
                },
                "param1": {
                  "type": "integer"
                },
                "param2": {
                  "type": "integer"
                },
                "param3": {
                  "type": "integer"
                },
                "caption": {
                  "type": "string"
                },
                "altIcon": {
                  "type": "integer"
                },
                "hidden": {
                  "type": "boolean"
                },
                "locationId": {
                  "type": "integer"
                },
                "inheritedLocation": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated channel",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "409": {
            "description": "Channel update will result in data loss. Please confirm the request with `confirm=true` GET param to force.",
            "schema": {
              "title": "Channel update confirmation response",
              "properties": {
                "schedules": {
                  "type": "array",
                  "description": "Schedules that will be deleted after this request.",
                  "items": {
                    "$ref": "#/definitions/Schedule"
                  }
                },
                "groups": {
                  "type": "array",
                  "description": "Channel groups that this channel will be removed from after this request.",
                  "items": {
                    "$ref": "#/definitions/ChannelGroup"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Execute action on the channel",
        "operationId": "executeAction",
        "tags": [
          "Channels"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Defines an action to execute on channel. The `action` key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelExecuteActionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action has been executed."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "title": "Channel action execution failed response",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Cannot execute requested action on this channel."
                }
              }
            }
          }
        }
      }
    },
    "/channels/{id}/schedules": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get schedules list of the channel",
        "operationId": "getChannelSchedules",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channel",
                "iodevice",
                "location",
                "closestExecutions"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Schedule"
              }
            }
          }
        }
      }
    },
    "/channels/{id}/measurement-logs-csv": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get measurement logs as zipped CSV file.",
        "description": "Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`. Logs ordered by date, descending.",
        "tags": [
          "Channels"
        ],
        "operationId": "getChannelMeasurementLogsCsvFile",
        "produces": [
          "application/zip"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Unsupported channel",
            "schema": {
              "title": "Channel unsupported function response",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "The requested function is not available on this channel"
                }
              }
            }
          }
        }
      }
    },
    "/channels/{id}/measurement-logs": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get measurement logs.",
        "description": "Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`. Logs ordered by date, descending.",
        "tags": [
          "Channels"
        ],
        "operationId": "getChannelMeasurementLogs",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "default": 5000,
            "description": "Maximum items count in response, from 1 to 5000"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "Total count of logs for this channel."
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "title": "Channel measurement log",
                "properties": {
                  "date_timestamp": {
                    "type": "integer"
                  },
                  "temperature": {
                    "type": "number",
                    "format": "float",
                    "example": 21.56,
                    "description": "Temperature in Celsius"
                  },
                  "humidity": {
                    "type": "number",
                    "format": "float",
                    "example": 48.8,
                    "description": "Humidity percent. Available only if channel function is `HUMIDITYANDTEMPERATURE`."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unsupoorted channel",
            "schema": {
              "title": "Channel unsupported function response",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "The requested function is not available on this channel"
                }
              }
            }
          }
        }
      }
    },
    "/channel-groups": {
      "get": {
        "tags": [
          "Channel Groups"
        ],
        "summary": "Get channels list",
        "operationId": "getChannelGroups",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channels"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of channels oroups owned by the current user.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelGroup"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new channel group",
        "operationId": "createChannelGroup",
        "tags": [
          "Channel Groups"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newely created channel group",
            "schema": {
              "$ref": "#/definitions/ChannelGroup"
            }
          }
        }
      }
    },
    "/channel-groups/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get channel group by ID",
        "tags": [
          "Channel Groups"
        ],
        "operationId": "getChannelGroup",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channels",
                "iodevice",
                "location"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelGroup"
            }
          }
        }
      },
      "put": {
        "summary": "Update channel group",
        "tags": [
          "Channel Groups"
        ],
        "operationId": "updateChannelGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ChannelGroup"
            }
          }
        }
      },
      "patch": {
        "summary": "Execute action on the channel group",
        "operationId": "executeChannelGroupAction",
        "tags": [
          "Channel Groups"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Defines an action to execute on channel group. The `action` key is always required. The rest of the keys are params depending on the chosen action. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelExecuteActionRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action has been executed."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Cannot execute requested action on this channel."
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Channel Group",
        "tags": [
          "Channel Groups"
        ],
        "operationId": "deleteChannelGroup",
        "responses": {
          "204": {
            "description": "Channel Group has been successfully deleted"
          }
        }
      }
    },
    "/client-apps": {
      "get": {
        "tags": [
          "Client Apps"
        ],
        "summary": "Get client apps",
        "operationId": "getClientApps",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "accessId",
                "connected"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientApp"
              }
            }
          }
        }
      }
    },
    "/client-apps/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "summary": "Update client app",
        "tags": [
          "Client Apps"
        ],
        "operationId": "updateClientApp",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Client App update request",
              "properties": {
                "caption": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "accessIdId": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientApp"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Client App",
        "tags": [
          "Client Apps"
        ],
        "operationId": "deleteClientApp",
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/iodevices": {
      "get": {
        "tags": [
          "IO Devices"
        ],
        "summary": "Get IO Devices",
        "operationId": "getIoDevices",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channels",
                "location",
                "originalLocation",
                "connected",
                "schedules"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          }
        }
      }
    },
    "/iodevices/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get IO Device",
        "tags": [
          "IO Devices"
        ],
        "operationId": "getIoDevice",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channels",
                "location",
                "originalLocation",
                "connected",
                "schedules",
                "accessids"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "put": {
        "summary": "Update IO Device",
        "tags": [
          "IO Devices"
        ],
        "operationId": "updateIoDevice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "IO Device update request",
              "properties": {
                "comment": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "locationId": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete IO Device",
        "tags": [
          "IO Devices"
        ],
        "operationId": "deleteIoDevice",
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/iodevices/{id}/channels": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get Channels that belong to IO Deice",
        "tags": [
          "IO Devices"
        ],
        "operationId": "getIoDeviceChannels",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "iodevice",
                "location"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get locations list",
        "operationId": "getLocations",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channels",
                "iodevices",
                "accessids",
                "channelGroups",
                "password"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations owned by the current user.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new location",
        "operationId": "createLocation",
        "tags": [
          "Locations"
        ],
        "responses": {
          "201": {
            "description": "Newely created location with automatic name",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        },
        {
          "name": "include",
          "in": "query",
          "description": "Specify what extra fields to include in the response.",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "channels",
              "iodevices",
              "accessids",
              "channelGroups",
              "password"
            ]
          },
          "collectionFormat": "csv"
        }
      ],
      "get": {
        "summary": "Get location by ID",
        "tags": [
          "Locations"
        ],
        "operationId": "getLocation",
        "responses": {
          "200": {
            "description": "Get location",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      },
      "put": {
        "summary": "Update location",
        "tags": [
          "Locations"
        ],
        "operationId": "updateLocation",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Location update request",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "caption": {
                  "type": "string"
                },
                "password": {
                  "type": "string",
                  "description": "Provide new password if you want to change it."
                },
                "accessIdsIds": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Access Identifiers identifiers to assign to this location."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Definition generated from Swagger Inspector",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete location",
        "tags": [
          "Locations"
        ],
        "operationId": "deleteLocation",
        "responses": {
          "204": {
            "description": "Location has been successfully deleted"
          }
        }
      }
    },
    "/server-status": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get the SUPLA Server status",
        "operationId": "getSuplaServerStatus",
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "Supla Server is alive"
          },
          "503": {
            "description": "SUPLA Server is down"
          }
        }
      }
    },
    "/server-info": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Get server info",
        "operationId": "getServerInfo",
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "Server Info",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "svr1.supla.org",
                  "description": "SUPLA Server address (to be used in smartphones)"
                },
                "time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Current server time"
                },
                "timezone": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "UTC"
                    },
                    "offset": {
                      "type": "integer",
                      "description": "Timezone offset in minutes"
                    }
                  }
                },
                "authenticated": {
                  "type": "boolean"
                },
                "username": {
                  "type": "string",
                  "example": "supler@supla.org",
                  "description": "Present only if `authenticated=true`"
                },
                "cloudVersion": {
                  "type": "string",
                  "example": "2.2.0"
                },
                "apiVersion": {
                  "type": "string",
                  "example": "2.2.0"
                },
                "supportedApiVersions": {
                  "type": "array",
                  "example": [
                    "2.0.0",
                    "2.1.0",
                    "2.2.0"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get schedules list",
        "operationId": "getSchedules",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channel",
                "iodevice",
                "location",
                "closestExecutions"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Schedule"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new schedule",
        "operationId": "createSchedule",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      },
      "patch": {
        "summary": "Enable schedules",
        "operationId": "enableSchedules",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "Schedules enable request",
              "properties": {
                "enable": {
                  "type": "array",
                  "description": "Array of schedule identifiers to enable",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/schedules/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "summary": "Get Schedule",
        "tags": [
          "Schedules"
        ],
        "operationId": "getSchedule",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "required": false,
            "description": "Specify what extra fields to include in the response.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "channel",
                "iodevice",
                "location",
                "closestExecutions"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      },
      "put": {
        "summary": "Update schedule",
        "operationId": "updateSchedule",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleRequest"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "type": "boolean",
            "description": "Set to `true` to enable the schedule after saving.",
            "enum": [
              true
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Schedule",
        "tags": [
          "Schedules"
        ],
        "operationId": "deleteSchedule",
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "title": "User data",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "timezone": {
                  "type": "string",
                  "example": "Europe/Warsaw"
                },
                "clientsRegistrationEnabled": {
                  "type": "string",
                  "format": "date-time"
                },
                "ioDevicesRegistrationEnabled": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user",
        "operationId": "updateCurrentUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "title": "User update request",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "The `change:userTimezone` requires to provide also a `timezone` value in the request. The `change:password` requires to provide also a `newPassword` and `oldPassword` in the request.",
                  "enum": [
                    "change:clientsRegistrationEnabled",
                    "change:ioDevicesRegistrationEnabled",
                    "change:userTimezone",
                    "change:password",
                    "agree:rules",
                    "agree:cookies"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessIdentifier": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Access Identifier identifier"
        },
        "caption": {
          "type": "string",
          "description": "Location caption"
        },
        "enabled": {
          "type": "boolean",
          "description": "`true` if the location is enabled, `false` otherwise"
        },
        "locationsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the location idenfifiers assigned to this access ID"
        },
        "clientAppsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the client apps idenfifiers assigned to this access ID"
        },
        "locations": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Location"
          }
        },
        "clientApps": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/ClientApp"
          }
        }
      }
    },
    "ClientApp": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Client application identifier"
        },
        "name": {
          "type": "string"
        },
        "caption": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "regIpv4": {
          "type": "integer"
        },
        "regDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastAccessIpv4": {
          "type": "integer"
        },
        "lastAccessDate": {
          "type": "string",
          "format": "date-time"
        },
        "softwareVersion": {
          "type": "string"
        },
        "protocolVersion": {
          "type": "integer"
        },
        "accessIdId": {
          "type": "integer"
        },
        "connected": {
          "type": "boolean"
        },
        "accessId": {
          "$ref": "#/definitions/AccessIdentifier"
        }
      }
    },
    "Channel": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Channel identifier"
        },
        "channelNumber": {
          "type": "integer",
          "description": "Channel ordinal number in its IO Device"
        },
        "caption": {
          "type": "string",
          "description": "Channel caption"
        },
        "type": {
          "$ref": "#/definitions/ChannelType"
        },
        "function": {
          "$ref": "#/definitions/ChannelFunction"
        },
        "param1": {
          "$ref": "#/definitions/ChannelParam"
        },
        "param2": {
          "$ref": "#/definitions/ChannelParam"
        },
        "param3": {
          "$ref": "#/definitions/ChannelParam"
        },
        "altIcon": {
          "type": "integer",
          "description": "Chosen alternative icon idenifier. Should not be greater than `funciton.maxAlternativeIconIndex`"
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether this channel is shown on client apps or not"
        },
        "inheritedLocation": {
          "type": "boolean",
          "description": "Whether this channel inherits its IO Device's location (`true`) or not (`false`)"
        },
        "iodeviceId": {
          "type": "integer"
        },
        "locationId": {
          "type": "integer"
        },
        "functionId": {
          "type": "integer",
          "example": 60
        },
        "typeId": {
          "type": "integer",
          "example": 1000
        },
        "iodevice": {
          "$ref": "#/definitions/Device"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "connected": {
          "type": "boolean"
        },
        "state": {
          "description": "The channel's state. The value and the format is dependend on the channel's function. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-states).",
          "example": {}
        },
        "supportedFunctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelFunction"
          }
        }
      }
    },
    "ChannelGroup": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Channel group identifier",
          "example": 1
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether this channel group is shown on client apps or not"
        },
        "caption": {
          "type": "string",
          "description": "Channel caption"
        },
        "function": {
          "$ref": "#/definitions/ChannelFunction"
        },
        "functionId": {
          "type": "integer",
          "example": 60
        },
        "locationId": {
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "channelIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "channels": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "altIcon": {
          "type": "integer",
          "description": "Chosen alternative icon idenifier. Should not be greater than `funciton.maxAlternativeIconIndex`"
        }
      }
    },
    "ChannelGroupRequest": {
      "required": [
        "channelIds"
      ],
      "properties": {
        "caption": {
          "type": "string"
        },
        "altIcon": {
          "type": "integer"
        },
        "hidden": {
          "type": "boolean"
        },
        "locationId": {
          "type": "integer"
        },
        "channelIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "ChannelType": {
      "properties": {
        "id": {
          "type": "integer",
          "enum": [
            1000,
            1010,
            1020,
            1500,
            2000,
            2010,
            2020,
            2900,
            3000,
            3010,
            3022,
            3020,
            3032,
            3030,
            3034,
            3036,
            3038,
            3042,
            3044,
            3048,
            3050,
            3100,
            4000,
            4010,
            4020
          ],
          "description": "Channel type identifier"
        },
        "name": {
          "type": "string",
          "enum": [
            "SENSORNO",
            "SENSORNC",
            "DISTANCESENSOR",
            "CALLBUTTON",
            "RELAYHFD4",
            "RELAYG5LA1A",
            "RELAY2XG5LA1A",
            "RELAY",
            "THERMOMETERDS18B20",
            "DHT11",
            "DHT21",
            "DHT22",
            "AM2301",
            "AM2302",
            "THERMOMETER",
            "HUMIDITYSENSOR",
            "HUMIDITYANDTEMPSENSOR",
            "WINDSENSOR",
            "PRESSURESENSOR",
            "RAINSENSOR",
            "WEIGHTSENSOR",
            "WEATHER_STATION",
            "DIMMER",
            "RGBLEDCONTROLLER",
            "DIMMERANDRGBLED"
          ]
        },
        "caption": {
          "type": "string",
          "example": "Sensor (normal open)"
        },
        "output": {
          "type": "boolean",
          "example": false,
          "description": "Whether the channel is output type (i.e. can take action) or input (i.e. provide data)"
        }
      }
    },
    "ChannelFunction": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 60,
          "enum": [
            0,
            10,
            20,
            30,
            40,
            42,
            45,
            50,
            60,
            70,
            80,
            90,
            100,
            110,
            120,
            130,
            140,
            180,
            190,
            200,
            210,
            220,
            230,
            240,
            250,
            260,
            270,
            280,
            290,
            300
          ]
        },
        "name": {
          "$ref": "#/definitions/ChannelFunctionEnumNames"
        },
        "caption": {
          "type": "string",
          "example": "Gate opening sensor"
        },
        "maxAlternativeIconIndex": {
          "type": "integer"
        },
        "possibleActions": {
          "type": "array",
          "description": "What can you with with this channel?",
          "items": {
            "$ref": "#/definitions/ChannelFunctionAction"
          }
        }
      }
    },
    "ChannelFunctionEnumNames": {
      "type": "string",
      "example": "OPENINGSENSOR_GATE",
      "enum": [
        "NONE",
        "CONTROLLINGTHEGATEWAYLOCK",
        "CONTROLLINGTHEGATE",
        "CONTROLLINGTHEGARAGEDOOR",
        "THERMOMETER",
        "HUMIDITY",
        "HUMIDITYANDTEMPERATURE",
        "OPENINGSENSOR_GATEWAY",
        "OPENINGSENSOR_GATE",
        "OPENINGSENSOR_GARAGEDOOR",
        "NOLIQUIDSENSOR",
        "CONTROLLINGTHEDOORLOCK",
        "OPENINGSENSOR_DOOR",
        "CONTROLLINGTHEROLLERSHUTTER",
        "OPENINGSENSOR_ROLLERSHUTTER",
        "POWERSWITCH",
        "LIGHTSWITCH",
        "DIMMER",
        "RGBLIGHTING",
        "DIMMERANDRGBLIGHTING",
        "DEPTHSENSOR",
        "DISTANCESENSOR",
        "OPENINGSENSOR_WINDOW",
        "MAILSENSOR",
        "WINDSENSOR",
        "PRESSURESENSOR",
        "RAINSENSOR",
        "WEIGHTSENSOR",
        "WEATHER_STATION",
        "STAIRCASETIMER"
      ]
    },
    "ChannelFunctionAction": {
      "properties": {
        "id": {
          "type": "integer",
          "enum": [
            10,
            20,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100
          ]
        },
        "name": {
          "$ref": "#/definitions/ChannelFunctionActionEnum"
        },
        "caption": {
          "type": "string"
        }
      }
    },
    "ChannelFunctionActionEnum": {
      "type": "string",
      "enum": [
        "OPEN",
        "CLOSE",
        "SHUT",
        "REVEAL",
        "REVEAL_PARTIALLY",
        "TURN_ON",
        "TURN_OFF",
        "SET_RGBW_PARAMETERS",
        "OPEN_CLOSE",
        "STOP"
      ]
    },
    "ChannelExecuteActionRequest": {
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/ChannelFunctionActionEnum"
        },
        "percentage": {
          "type": "integer",
          "example": 40
        },
        "color": {
          "type": "string",
          "example": "0x00FF00"
        },
        "color_brightness": {
          "type": "integer"
        },
        "brightness": {
          "type": "integer"
        }
      }
    },
    "ChannelParam": {
      "type": "integer",
      "description": "Configuration of the channel behavior. Value meaning depends on the chosen channel function. See more details on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-parameters)."
    },
    "Device": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Device identifier"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "comment": {
          "type": "string"
        },
        "regDate": {
          "type": "string",
          "format": "date-time"
        },
        "regIpv4": {
          "type": "integer"
        },
        "lastConnected": {
          "type": "string",
          "format": "date-time"
        },
        "lastIpv4": {
          "type": "integer"
        },
        "softwareVersion": {
          "type": "string"
        },
        "gUIDString": {
          "type": "string"
        },
        "locationId": {
          "type": "integer"
        },
        "originalLocationId": {
          "type": "integer"
        },
        "channelsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "connected": {
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "originalLocation": {
          "$ref": "#/definitions/Location"
        },
        "channels": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "schedules": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        }
      }
    },
    "Location": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Location identifier"
        },
        "caption": {
          "type": "string",
          "description": "Location caption"
        },
        "enabled": {
          "type": "boolean",
          "description": "`true` if the location is enabled, `false` otherwise"
        },
        "iodevicesIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the IO Devices identifiers assigned to this location"
        },
        "channelGroupsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the Channel groups identifiers assigned to this location"
        },
        "channelsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the Channels identifiers expicitely assigned to this location"
        },
        "accessIdsIds": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "array containing the Access Identifiers identifiers assigned to this location"
        },
        "password": {
          "type": "string",
          "description": "Location password (plain text). Returned only if requested by the `include` parameter."
        },
        "iodevices": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "channelGroups": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "example": [],
          "items": {
            "$ref": "#/definitions/ChannelGroup"
          }
        },
        "accessIds": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/AccessIdentifier"
          }
        },
        "channels": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter.",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        }
      }
    },
    "Schedule": {
      "properties": {
        "id": {
          "type": "integer",
          "description": "Schedule identifier"
        },
        "timeExpression": {
          "type": "string",
          "description": "Schedule time expression in crontab notation (with some custom additions).",
          "example": "*/5 * * * *"
        },
        "action": {
          "$ref": "#/definitions/ChannelFunctionAction"
        },
        "actionParam": {
          "example": {},
          "description": "Depends on the action."
        },
        "mode": {
          "type": "string",
          "enum": [
            "minutely",
            "hourly",
            "daily",
            "once"
          ]
        },
        "dateStart": {
          "type": "string",
          "format": "date-time"
        },
        "dateEnd": {
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "type": "boolean"
        },
        "caption": {
          "type": "string"
        },
        "retry": {
          "type": "boolean"
        },
        "channelId": {
          "type": "integer"
        },
        "actionId": {
          "type": "integer"
        },
        "channel": {
          "$ref": "#/definitions/Channel"
        },
        "closestExecutions": {
          "type": "array",
          "description": "Returned only if requested by the `include` parameter. Contains two arrays of maximum 3 closest past and future executions.",
          "items": {
            "properties": {
              "past": {
                "type": "array",
                "items": {
                  "properties": {
                    "plannedTimestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "resultTimestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "failed": {
                      "type": "boolean",
                      "example": false
                    },
                    "result": {
                      "properties": {
                        "caption": {
                          "type": "string",
                          "example": "Successful"
                        }
                      }
                    }
                  }
                }
              },
              "future": {
                "type": "array",
                "items": {
                  "properties": {
                    "plannedTimestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ScheduleRequest": {
      "required": [
        "channelId",
        "actionId",
        "mode",
        "timeExpression"
      ],
      "properties": {
        "channelId": {
          "type": "integer"
        },
        "actionId": {
          "type": "integer"
        },
        "mode": {
          "type": "string",
          "enum": [
            "once",
            "minutely",
            "daily",
            "hourly"
          ]
        },
        "timeExpression": {
          "type": "string",
          "description": "Schedule time expression in crontab notation (with some custom additions)."
        },
        "actionParam": {
          "example": {}
        },
        "dateStart": {
          "type": "string",
          "format": "date-time"
        },
        "dateEnd": {
          "type": "string",
          "format": "date-time"
        },
        "caption": {
          "type": "string"
        },
        "retry": {
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {
    "AccessIdIncludes": {
      "name": "include",
      "in": "query",
      "description": "Specify what extra fields to include in the response.",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string",
        "enum": [
          "locations",
          "clientApps",
          "password"
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    },
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "read": "Grants read access",
        "write": "Grants write access",
        "admin": "Grants read and write access to administrative information"
      }
    }
  },
  "security": [
    {
      "token": []
    },
    {
      "OAuth2": []
    }
  ]
}